define([
  'app'
], function (app) {
  'use strict';

  app.controller('ViewerCtrl', [
    '$ionicPlatform',
    '$scope',
    '$state',
    '$stateParams',
    '$ionicHistory',
    '$sce',
    'ENV',
    '$rootScope',
    '$ionicLoading',
    '$timeout',
    'ApiSvc',
    '$window',
    '$ionicPopup',
    '$cordovaInAppBrowser',
    function ($ionicPlatform, $scope, $state, $stateParams, $ionicHistory, $sce, env, $rootScope, $ionicLoading, $timeout, apiSvc, $window, $ionicPopup, $cordovaInAppBrowser) {
      
      $rootScope.settings = JSON.parse($window.localStorage.getItem(env.LOCAL_SETTING_KEY) || "{}");
      
      $scope.learner = {
        startTimestamp : null,          // 학습 시작 시간
        endTimestamp : null,            // 학습 종료 시간
        totalLearningTime : 0,          // 총 학습 시간
        lastStartTimestamp : null,      // 최근 다시 시작한 시간
        lastPausedTimestamp : null,     // 최근 일시 중지한 시간
        isLearningStarted : false,      // 학습을 시작 했는지 여부
        isLearningEnded : false         // 학습이 종료 됬는지 여부
      };

      $scope.item = {
        lectureSeqno : $stateParams.lectureSeqno,     // 강좌 일련번호
        wsSeqno : $stateParams.wsSeqno,               // 주차 일련번호
        tocSeqno : $stateParams.tocSeqno,             // 학습목차 일련번호
        connGb : $stateParams.connGb,                 // 학습자원 종류 -------------
        mobileConnPk : $stateParams.mobileConnPk,     // 모바일 리소스 연계 키
        prgssRateCompleteBasis : $stateParams.prgssRateCompleteBasis, // 콘텐츠 완료 기준 진도율
        viewerRunYn : $stateParams.viewerRunYn,       // 학습창내 실행 여부(학습창/새창 여부)  ----------
        viewerWidthSize : $stateParams.viewerWidthSize ? $stateParams.viewerWidthSize : env.VIEWER_WIDTH,  // 학습창 넓이 -----------
        viewerHgtSize : $stateParams.viewerHgtSize ? $stateParams.viewerHgtSize : env.VIEWER_HEIGHT,// 학습창 높이 -----------
        tocName : $stateParams.tocName,                // 목차타이틀
        saveTerm : null,                               // 학습이력 저장 간격 (초)
        defaultContentsCdn : null,                     // 웹 콘텐츠 기본 경로
        itemDetail : null,                             // 주차의 학습 목차 목록
        resourceList : null,                           // 학습목차에 연결된 학습 자원 목록
        isMedia : false,                               // 미디어인지 여부
        isPlaying : false,                             // 학습중인지 여부
        tocEdTime : null,                              // 목차 권장 학습 시간
        serviceYn : 'Y',                               // 학습 이력 저장 가능 여부
        viewingYn : 'Y',                               // 학습창 보기 가능 여부
        rscTypeGb : null,                              // 학습자원 유형 ('0001' : 동영상 파일, '0002' : 동영상 CDN, '0003' : 음성파일, '0004' : 음성 CDN, '0008' : 웹링크, '0009' : 웹콘텐츠)
        rscDetailTypeGb : null,                        // 학습자원 상세 유형 ('000001' : 자막 파일)
        rscDetailPath : null,                          // 학습자원 경로
        rscDetailFileName : null,                      // 학습자원 파일명
        cdnUrl : null,                                 // 미디어 스트리밍 CDN URL
        contentsServiceUrl : null,                     // 콘텐츠 서비스 Full URL
        vttYn : null,                                  // 자막 유무
        vttRscDetailPath : null,                       // 기본 자막파일 경로
        vttRscDetailFileName : null,                   // 기본 자막파일 명
        vttLangGb : null,                              // 기본 자막 언어 코드
        vttLangName : null,                            // 기본 자막 언어 명
        vttServiceUrl : null                           // 자막 서비스 Full URL
      };


      // Setup the loader
      $ionicLoading.show({
        content: 'Loading',
        animation: 'fade-in',
        showBackdrop: true,
        maxWidth: 200,
        showDelay: 0
      });
      
      doLoadingServiceInfo($stateParams);
      console.log("============");
      // 학습 일시 중지
      $scope.doPauseStudy = function() {
        if ($scope.item.isPlaying) {
          console.log("일시 중지");
// alert('currentTime : ' + document.getElementById("media").currentTime);
          $scope.item.isPlaying = false;
          $scope.learner.lastPausedTimestamp = Math.floor(Date.now() / 1000);
          $scope.learner.totalLearningTime += ($scope.learner.lastPausedTimestamp - $scope.learner.lastStartTimestamp);

          if ($scope.item.isMedia) {
            if (learningObj) learningObj.pause();
          }else {
          };

          console.log('$scope.learner.totalLearningTime:'+$scope.learner.totalLearningTime);
          console.log('$scope.learner.lastStartTimestamp:'+$scope.learner.lastStartTimestamp);
          console.log('$scope.learner.lastPausedTimestamp:'+$scope.learner.lastPausedTimestamp);
        };
      };
console.log("============1");
      // 학습 재개
      $scope.doResumeStudy = function() {
        if (!$scope.item.isPlaying) {
          console.log("다시 시작");

          $scope.item.isPlaying = true;
          $scope.learner.lastStartTimestamp = Math.floor(Date.now() / 1000);

          if ($scope.item.isMedia) {
            if (learningObj) learningObj.play();
          }else {

          };

          console.log('$scope.learner.totalLearningTime:'+$scope.learner.totalLearningTime);
          console.log('$scope.learner.lastStartTimestamp:'+$scope.learner.lastStartTimestamp);
          console.log('$scope.learner.lastPausedTimestamp:'+$scope.learner.lastPausedTimestamp);
        };
      };
console.log("============2");
      // 학습 종료
      $scope.doStopStudy = function() {
        if ($scope.item.isPlaying) {
          console.log("종료");

          $scope.item.isPlaying = false;
          $scope.learner.lastPausedTimestamp = Math.floor(Date.now() / 1000);
          $scope.learner.totalLearningTime += ($scope.learner.lastPausedTimestamp - $scope.learner.lastStartTimestamp);

          if ($scope.item.isMedia) {
            if (learningObj) learningObj.pause();
          }else {

          };

          console.log('$scope.learner.totalLearningTime:'+$scope.learner.totalLearningTime);
          console.log('$scope.learner.lastStartTimestamp:'+$scope.learner.lastStartTimestamp);
          console.log('$scope.learner.lastPausedTimestamp:'+$scope.learner.lastPausedTimestamp);
        };
      };
console.log("============3");
      // 학습 뷰어 종료
      $scope.doExit = function() {
        $scope.learner.isLearningEnded = true;
        $scope.learner.endTimestamp = Math.floor(Date.now() / 1000);
        $scope.doStopStudy();

        console.log('$scope.learner.startTimestamp:'+$scope.learner.startTimestamp);
        console.log('$scope.learner.endTimestamp:'+$scope.learner.endTimestamp);
        console.log('$scope.learner.totalLearningTime:'+$scope.learner.totalLearningTime);
        console.log('$scope.learner.lastStartTimestamp:'+$scope.learner.lastStartTimestamp);
        console.log('$scope.learner.lastPausedTimestamp:'+$scope.learner.lastPausedTimestamp);
      };
console.log("============4");
      // 학습 시작
      $scope.doStartStudy = function() {
        // document.getElementById("media").currentTime = 10;
        // alert('currentTime : ' + document.getElementById("media").currentTime);
        if (!$scope.item.isPlaying) {
          if (!$scope.learner.isLearningStarted) {
            $scope.learner.startTimestamp = Math.floor(Date.now() / 1000);
            $scope.learner.isLearningStarted = true;
          }
          console.log("시작");

          $scope.item.isPlaying = true;
          $scope.learner.lastStartTimestamp = Math.floor(Date.now() / 1000);

          if ($scope.item.isMedia) {
            if (learningObj) learningObj.play();
          }else {

          };

          console.log('$scope.learner.totalLearningTime:'+$scope.learner.totalLearningTime);
          console.log('$scope.learner.lastStartTimestamp:'+$scope.learner.lastStartTimestamp);
          console.log('$scope.learner.lastPausedTimestamp:'+$scope.learner.lastPausedTimestamp);
        };
      };
console.log("============5");
      // 화면 터치
      $scope.onTouch = function() {
        if ($scope.item.isMedia) {
          if (jQuery('#infoPanel').css('display') == 'none') {
            jQuery('#infoPanel').slideDown();
            $timeout(function() {
              jQuery('#infoPanel').slideUp();
            }, 7000, true);
          }else {
            jQuery('#infoPanel').slideUp();
          };
        };
      };
console.log("============6");
      $scope.showConfirm = function() {
        $scope.doPauseStudy();

        var confirmPopup = $ionicPopup.confirm({
          title: '학습종료',
          template: '학습을 종료하시겠습니까?'
        });
        
        confirmPopup.then(function(res) { 
          if(res) {
            $scope.doExit();
            $ionicHistory.goBack(-2);
          } else {
            $scope.doResumeStudy();
          }
        });
      };
console.log("============7");
      $ionicPlatform.ready(function() {
console.log("============16");
        setContents();

        $window.addEventListener("orientationchange", function() {
          doOnOrientationChange();
        }, false);

        $window.addEventListener("resume", function() {
          $scope.doResumeStudy();
        }, false);
        
        $window.addEventListener("pause", function() {
          $scope.doPauseStudy();
        }, false);

      });
console.log("============8");
      var learningObj = document.getElementById('media');

      // 앱 가로/세로 변경
      function doOnOrientationChange() {

        switch($window.orientation) {  
          case -90: // 가로모드 landscape

            $scope.viewerOrientation = 'landscape';

            if ($scope.item.isMedia) {
              onResizeWindow();
            }else {
              $scope.webContentsWidth = $window.innerWidth;
            }
            break;
          case 90: // 가로모드 landscape
            $scope.viewerOrientation = 'landscape';
            if ($scope.item.isMedia) {
              onResizeWindow();
            }else {
              $scope.webContentsWidth = $window.innerWidth;
            }
            break; 
          case 0: // 세로모드 Portrait
            $scope.viewerOrientation = 'portrait';
            if ($scope.item.isMedia) {
              onResizeWindow();
            }else {
              $scope.webContentsWidth = $window.innerWidth;
            }
            break; 
          case 180: // 세로모드 Portrait
            $scope.viewerOrientation = 'portrait';
            if ($scope.item.isMedia) {
              onResizeWindow();
            }else {
              $scope.webContentsWidth = $window.innerWidth;
            }
            break; 
          default: // 세로모드 Portrait
            $scope.viewerOrientation = 'portrait';
            if ($scope.item.isMedia) {
              onResizeWindow();
            }else {
              $scope.webContentsWidth = $window.innerWidth;
            }
            break; 
        };
        console.log('viewerOrientation : ' + $scope.viewerOrientation );
        console.log('window Width : '+$window.innerWidth);
        console.log('window Height : '+$window.innerHeight);
        console.log('video Width : '+$scope.mediaWidth);
        console.log('video Height : '+$scope.mediaHeight);
      };
console.log("============9");
      function setContents() {

        // if ($scope.item.resourceList != undefined && $scope.item.resourceList != null) {
        //   angular.forEach(resource, function(resource, idx){
        //     resource.
        //   });
        // };
        
console.log($scope.item.contentsServiceUrl);

        try {
          $scope.contentsUrl = $sce.getTrustedResourceUrl($scope.item.contentsServiceUrl); // 콘텐츠 경로 검사
        }catch (err) {
          console.log(err);
          alert('콘텐츠를 로딩할 수 없습니다.');

          $ionicLoading.hide();
          $ionicHistory.goBack(-1);
        };

        if ($stateParams.contentsType != undefined) {

          console.log('-----window width : '+$window.innerWidth);
          console.log('media width : '+$stateParams.width);
          console.log('window height : '+$window.innerHeight);
          console.log('media height : '+$stateParams.height);

          jQuery('#playerHeader').hide();

          // 미디어 유형일 경우
          if ($stateParams.contentsType == 'VIDEO' || $stateParams.contentsType == 'AUDIO') {

            learningObj = document.getElementById('media');

            $scope.item.isMedia = true;
            $scope.mediaUrl = $scope.contentsUrl;
            $scope.poster = $stateParams.poster != null ? $stateParams.poster : env.VIDWER_DEFAULT_POSTER;
            
            if ($stateParams.contentsType == 'VIDEO') {
              $scope.mediaType = 'video/mp4';
            }else if ($stateParams.contentsType == 'AUDIO') {
              $scope.mediaType = 'audio/mp3';
            };

            onResizeWindow();
            
            learningObj.addEventListener("loadedmetadata", function () {
              if ($rootScope.settings.autoPlay != undefined 
                && $rootScope.settings.autoPlay == 'autoplay') 
                  $scope.doStartStudy();

              $ionicLoading.hide();
              console.log('loadedmetadata');
            }, false);

            //  paused and playing events to control buttons
            learningObj.addEventListener("pause", function () {
              console.log('pause');
              $scope.doPauseStudy();
            }, false);

            learningObj.addEventListener("playing", function () {
              console.log('playing');
              $scope.doStartStudy();
            }, false);

            learningObj.addEventListener("ended", function () {
              // document.getElementById("ndd").textContent = "Playback ended";
              console.log('ended');
              $scope.doStopStudy();
            }, false);

            learningObj.addEventListener("error", function (err) {
              console.log('error');
              console.log(err);
              $scope.doStopStudy();
            }, true);

          // 웹 콘텐츠 유형일 경우
          }else {
            
            learningObj = document.getElementById('webContents');
            jQuery('#playerHeader').show();

            $scope.item.isMedia = false;

            if ($stateParams.contentsType == 'WEB') {
              $scope.webContentsUrl = $scope.contentsUrl;
              $scope.webContentsWidth = $stateParams.width != null ? $stateParams.width : env.VIEWER_WIDTH;
              $scope.webContentsWidth = $window.innerWidth;

              learningObj.onload = function() {
                //autoResize('webContents');
                $ionicLoading.hide();
                $scope.doStartStudy();
              };
            }else if ($stateParams.contentsType == 'URL') {

              $ionicLoading.hide();
              $scope.doStartStudy();
              //showAlert('새창에서 실행되었습니다.');
              
              //openBrowser($scope.contentsUrl);
              //$scope.openInExternalBrowser($scope.contentsUrl);
              //$scope.openInAppBrowser($scope.contentsUrl);
              //$scope.openCordovaWebView($scope.contentsUrl);
              //
              // learningObj = $window.open($scope.contentsUrl, '_self', 'location=yes');
              // return false;
              // $scope.doStartStudy();
              
              var ref = $window.open($scope.contentsUrl, '_blank', 'location=no');

              ref.addEventListener("loadstart", function() {
                console.log('browser loadstart');
              }, false);

              ref.addEventListener("loadstop", function() {
                console.log('browser loadstop');
                $ionicLoading.hide();
              }, false);

              ref.addEventListener("loaderror", function() {
                console.log('browser loaderror');
                $ionicLoading.hide();
                showAlert('콘텐츠를 로딩할 수 없습니다. 존재하지 않는 URL 이거나, 네트워크 문제일 수 있습니다.');
              }, false);

              ref.addEventListener("exit", function() {
                //showAlert('');
                console.log('browser exit');
                $scope.doExit();
                $ionicHistory.goBack(-2);
              }, false);
            }else {

            }
          };
        };
      };
console.log("============10");
      // function openBrowser(url) {
      //   var options = {
      //     location: 'no',
      //     clearcache: 'yes',
      //     toolbar: 'no'
      //   };

      //   $cordovaInAppBrowser.open(url, '_self', options)
      //   .then(function(event) {
      //     // success
      //     console.log('contents load success');
      //   })
      //   .catch(function(event) {
      //     // error
      //     console.log(event);
      //   });

        
      // };

// $scope.openInExternalBrowser = function(url)
// {
//  // Open in external browser
//  window.open(url,'_system','location=yes'); 
// };
 
// $scope.openInAppBrowser = function(url)
// {
//  // Open in app browser
//  window.open(url,'_blank','location=no'); 
// };
 
// $scope.openCordovaWebView = function(url)
// {
//  // Open cordova webview if the url is in the whitelist otherwise opens in app browser
//  window.open(url,'_self','location=no'); 
// };


      function showAlert(msg, isGoBack) {
        var alertPopup = $ionicPopup.alert({
          title: '알림',
          template: msg,
          okText : '확인',
          okType : 'button-balanced'
        });
        
        alertPopup.then(function(res) {
          if (isGoBack) $state.goBack(-1);
        });
      };
console.log("============11");
      // 화면 사이즈 변경
      function onResizeWindow() {
        if ($scope.item.isMedia) {
          console.log('isMedia : '+$scope.item.isMedia);
          var video = jQuery("#media");
          if (learningObj) resizeVideo(video);
        }else {
          if (learningObj) resizeFrame();
        };
      };
console.log("============12");
      // 프레임 사이즈 변경
      function resizeFrame() {

      };
console.log("============13");
      // 미디어 사이즈 변경
      function resizeVideo(videoObject) {
        console.log('resizeVideo : ');
          var percentWidth = videoObject.clientWidth * 100 / videoObject.videoWidth;
          console.log('percentWidth : '+percentWidth);
          console.log('videoObject.videoHeight : '+videoObject.videoHeight);
          var videoHeight = videoObject.videoHeight * percentWidth / 100;
          
          if (videoHeight == 0 || videoHeight > $window.innerHeight) videoHeight = $window.innerHeight;
          console.log('$window.innerHeight : '+$window.innerHeight);
          console.log('videoHeight : '+videoHeight);

          videoObject.height(videoHeight);
      };
console.log("============14");
      // 학습창 로딩시 필요 정보 조회
      function doLoadingServiceInfo(param) {
        apiSvc.call('doLoadingServiceInfo', param).then(function(res) {
          if (res != null) {
            console.log('DATA received.000');
            $scope.item.saveTerm = res.SAVE_TERM;
console.log('DATA received.0-0');
            $scope.item.defaultContentsCdn = res.DEFAULT_CONTENTS_CDN;
console.log('DATA received.0-01');
            $scope.item.resourceList = res.RESOURCE_LIST;
console.log('DATA received.0-1');
            if (res.ITEM_LIST != undefined && res.ITEM_LIST != null) {
console.log('DATA received.0-2');
              var isBreak = false;
              angular.forEach(res.ITEM_LIST, function(itm, idx){
console.log('DATA received.0-3');
                if (!isBreak && $scope.item.tocSeqno == itm.tocSeqno) {
console.log('DATA received.0-4');
                  isBreak = true;
                  $scope.item.itemDetail = itm;
                  $scope.item.finalLearnPst = itm.finalLearnPst;
                  $scope.item.serviceYn = itm.serviceYn;
                  $scope.item.viewingYn = itm.viewingYn;
                };
              });
            };
console.log('DATA received.1');
            if ($scope.item.viewingYn != 'Y') showAlert('학습 가능 기간이 아닙니다.', true);
console.log('DATA received.2');
            if (res.RESOURCE_LIST != undefined && res.RESOURCE_LIST != null) {
console.log('DATA received.3');
              angular.forEach(res.RESOURCE_LIST, function(rsc, idx){
console.log('DATA received.4');
                if ($scope.item.mobileConnPk == rsc.rscSeqno) {
console.log('DATA received.5');
                  // 미디어 파일
                  if (rsc.rscTypeGb == '0001' || rsc.rscTypeGb == '0003') {
console.log('DATA received.6');
                    if (rsc.rscDetailTypeGb != '000001' && $scope.item.rscTypeGb == null) {
console.log('DATA received.7');
                      $scope.item.rscTypeGb = rsc.rscTypeGb;
                      $scope.item.rscDetailTypeGb = rsc.rscDetailTypeGb;
                      $scope.item.rscDetailPath = rsc.rscDetailPath;
                      $scope.item.rscDetailFileName = rsc.rscDetailFileName;
                      $scope.item.cdnUrl = rsc.cdnUrl;
                      $scope.item.contentsServiceUrl = $scope.item.defaultContentsCdn + rsc.rscDetailPath + '/' + rsc.rscDetailFileName;
                    }else if (rsc.rscDetailTypeGb == '000001' && rsc.rscStartFileYn == 'Y') {
console.log('DATA received.8');
                      if ($scope.item.vttYn == null || $scope.item.vttYn != 'Y') {
console.log('DATA received.9');
                        $scope.item.vttYn = 'Y';
                        $scope.item.rscDetailTypeGb = rsc.rscDetailTypeGb;
                        $scope.item.vttRscDetailPath = rsc.rscDetailPath;
                        $scope.item.vttRscDetailFileName = rsc.rscDetailFileName;
                        $scope.item.vttLangGb = rsc.langGb;
                        $scope.item.vttLangName = rsc.LangName;
                        $scope.item.vttServiceUrl = $scope.item.defaultContentsCdn + rsc.rscDetailPath + '/' + rsc.rscDetailFileName;
                      };
                    };
                  // 미디어 CDN
                  }else if (rsc.rscTypeGb == '0002' || rsc.rscTypeGb == '0004') {
console.log('DATA received.10');
                    // CDN 경로
                    if (rsc.rscDetailTypeGb != '000001' && $scope.item.rscTypeGb == null) {
console.log('DATA received.11');
                      $scope.item.rscTypeGb = rsc.rscTypeGb;
                      $scope.item.rscDetailTypeGb = rsc.rscDetailTypeGb;
                      $scope.item.rscDetailFileName = rsc.rscDetailFileName;
                      $scope.item.cdnUrl = rsc.cdnUrl;

                      if (rsc.cdnUrl != null) {
                        if (rsc.rscDetailFileName.indexOf('://') > -1) {
                          $scope.item.contentsServiceUrl = rsc.rscDetailFileName;
                        }else {
                          if (rsc.cdnUrl.substring(rsc.cdnurl.length-1, 1) == '/') $scope.item.contentsServiceUrl = rsc.rscDetailFileName.startWith('/') ? rsc.cdnUrl.substring(0, rsc.cdnUrl.length-1) + rsc.rscDetailFileName : rsc.cdnUrl + rsc.rscDetailFileName;
                          else $scope.item.contentsServiceUrl = rsc.rscDetailFileName.startWith('/') ? rsc.cdnUrl + rsc.rscDetailFileName : rsc.cdnUrl.substring(0, rsc.cdnUrl.length-1) + rsc.rscDetailFileName;
                        };
                      }else {
                        $scope.item.contentsServiceUrl = rsc.rscDetailFileName;
                      };
                      console.log('DATA received.11-1');
                    // 자막 파일
                    }else if (rsc.rscDetailTypeGb == '000001' && rsc.rscStartFileYn == 'Y') {
console.log('DATA received.12');
                      if ($scope.item.vttYn == null || $scope.item.vttYn != 'Y') {
                        $scope.item.vttYn = 'Y';
                        $scope.item.rscDetailTypeGb = rsc.rscDetailTypeGb;
                        $scope.item.vttRscDetailPath = rsc.rscDetailPath;
                        $scope.item.vttRscDetailFileName = rsc.rscDetailFileName;
                        $scope.item.vttLangGb = rsc.langGb;
                        $scope.item.vttLangName = rsc.LangName;
                        $scope.item.vttServiceUrl = $scope.item.defaultContentsCdn + rsc.rscDetailPath + '/' + rsc.rscDetailFileName;
                      };
                    };
                  // 웹링크
                  }else if (rsc.rscTypeGb == '0008') {
console.log('DATA received.13');
                    if ($scope.item.rscTypeGb == null) {
                      $scope.item.rscTypeGb = rsc.rscTypeGb;
                      $scope.item.rscDetailTypeGb = rsc.rscDetailTypeGb;
                      $scope.item.rscDetailFileName = rsc.rscDetailFileName;
                      $scope.item.vttYn = 'N';
                      $scope.item.contentsServiceUrl = rsc.rscDetailFileName;
                    };
                  // 웹 콘텐츠
                  }else if (rsc.rscTypeGb == '0009') {
console.log('DATA received.14');
                    //콘텐츠 URL + Index
                    if ($scope.item.rscTypeGb == null && $scope.item.rscStartFileYn == 'Y') {
                      $scope.item.rscTypeGb = rsc.rscTypeGb;
                      $scope.item.rscDetailTypeGb = rsc.rscDetailTypeGb;
                      $scope.item.vttRscDetailPath = rsc.rscDetailPath;
                      $scope.item.rscDetailFileName = rsc.rscDetailFileName;
                      $scope.item.vttYn = 'N';
                      $scope.item.contentsServiceUrl = $scope.item.defaultContentsCdn + rsc.rscDetailPath + '/' + rsc.rscDetailFileName;
                    };
                  };
                };
              });
            };
          };
        });
      };
console.log("============15");


      //autoResize('webContents');
// function autoResize(id){
//     var newheight;
//     var newwidth;

//     if(document.getElementById){
//         newheight = document.getElementById(id).contentWindow.document.body.scrollHeight;
//         newwidth = document.getElementById(id).contentWindow.document.body.scrollWidth;
//         console.log('newheight:'+document.getElementById(id).contentWindow.document.body.scrollHeight);
//         console.log('newwidth:'+document.getElementById(id).contentWindow.document.body.scrollWidth);
//         document.getElementById(id).contentWindow.document.body.width = newwidth;
//         document.getElementById(id).contentWindow.document.body.height = newheight;
//     }

//     document.getElementById(id).height = (newheight) + "px";
//     document.getElementById(id).width = (newwidth) + "px";
// }
      // 학습창 종료시 주차 목록 화면으로 이동
      // $scope.exitViewer = function () {
      //   console.log('exitViewer');
      //   if (confirm('학습을 종료하시겠습니까?')) {
      //     console.log('confirmed');
      //     $scope.doExit();
      //     $ionicHistory.goBack(-2);
      //     // var i,
      //     //     currentHistoryId = $ionicHistory.currentHistoryId(),
      //     //     history = $ionicHistory.viewHistory();
      //     // if (history.histories[currentHistoryId] != undefined && history.histories[currentHistoryId] != null)
      //     // var stack = history.histories[currentHistoryId].stack;

      //     // if (stack != undefined && stack[stack.length-1] != undefined) {
      //     //   $ionicHistory.backView(stack[stack.length-1]);
      //     //   $ionicHistory.goBack(-1);
      //     // }else {
      //     //   if (!$ionicHistory.goBack(-1)) $state.go('myclass.tocList', $stateParams);
      //     // };
      //   };
      //   // for (i = 0; i < stack.length; i += 1) {
      //   //   console.log(stack[i].stateId);


      //   //     if (stack[i].stateId.indexOf("member.ingCourseDetail_") == 0) {
      //   //         $ionicHistory.backView(stack[i]);
      //   //         $ionicHistory.goBack(-1);
      //   //         break;
      //   //     }
      //   // }
      // };


    }
  ]);
});
          // Video Events
          // // content has loaded, display buttons and set up events
          // mediaObj.addEventListener("canplay", function () {
          //   console.log('canplay');
          // }, false);

          // //  display the current and remaining times
          // mediaObj.addEventListener("timeupdate", function () {
          //   //  Current time  
          //   // var vTime = video.currentTime;
          //   // document.getElementById("curTime").textContent = vTime.toFixed(1);
          //   // document.getElementById("vRemaining").textContent = (vLength - vTime).toFixed(1);
          //   console.log('timeupdate');
          // }, false);

          // mediaObj.addEventListener("volumechange", function () {
          //   if (video.muted) {
          //     // if muted, show mute image
          //     document.getElementById("mute").innerHTML = "<img alt='volume off button' src='mute2.png' />";
          //     console.log('');
          //   } else {
          //     // if not muted, show not muted image
          //     document.getElementById("mute").innerHTML = "<img alt='volume on button' src='vol2.png' />";
          //     console.log('');
          //   }
          //   console.log('volumechange');
          // }, false);
          // //  Download and playback status events.
          // mediaObj.addEventListener("loadstart", function () {
          //   // document.getElementById("ls").textContent = "Started";
          //   console.log('loadstart');
          // }, false);
          // mediaObj.addEventListener("loadeddata", function () {
          //   // document.getElementById("ld").textContent = "Data was loaded";
          //   console.log('loadeddata');
          // }, false);

          // mediaObj.addEventListener("emptied", function () {
          //   // document.getElementById("mt").textContent = "Video reset";
          //   console.log('emptied');
          // }, false);

          // mediaObj.addEventListener("stalled", function () {
          //   // document.getElementById("stall").textContent = "Download was stalled";
          //   console.log('stalled');
          // }, false);
          // mediaObj.addEventListener("waiting", function () {
          //   // document.getElementById("waiting").textContent = "Player waited for content";
          //   console.log('waiting');
          // }, false);

          // mediaObj.addEventListener("durationchange", function () {
          //   // document.getElementById("dc").textContent = "Duration has changed";
          //   console.log('durationchange');
          // }, false);
          // mediaObj.addEventListener("canplaythrough", function () {
          //   // document.getElementById("cpt").textContent = "Ready to play whole video";
          //   console.log('canplaythrough');
          // }, false);
          // mediaObj.addEventListener("progress", function () {
          //   // pgFlag += "+";
          //   // if (pgFlag.length > 10) {
          //   //   pgFlag = "+";
          //   // }
          //   // document.getElementById("pg").textContent = pgFlag;
          //   console.log('progress');
          // }, false);